// server.js
import express from "express";
import cors from "cors";
import morgan from "morgan";
import fs from "fs";

const app = express();

// --- Logging & CORS ---
app.use(morgan("tiny"));
const allow = (process.env.CORS_ALLOWED_ORIGINS || "*")
  .split(",")
  .map(s => s.trim())
  .filter(Boolean);

app.use(
  cors({
    origin: (origin, cb) => {
      if (!origin || allow.includes("*") || allow.includes(origin)) return cb(null, true);
      return cb(new Error("Not allowed by CORS"), false);
    },
    credentials: false,
  })
);

// --- Config ---
const H_API_BASE = process.env.H_API_BASE || "https://developers.hostinger.com";
const H_TOKEN = process.env.HOSTINGER_API_TOKEN; // ตั้งค่าใน ENV ของ Render
const AF_BASE = process.env.AF_BASE || "https://gg-app.link/Affiliage-hostinger";

// --- In-memory cache (ลดโหลด API) ---
const cache = new Map();
const TTL = Number(process.env.CATALOG_TTL_SECONDS || 600) * 1000; // 10 นาที

function cacheKey(path, params) {
  const qs = new URLSearchParams(params).toString();
  return `${path}?${qs}`;
}

async function callHostinger(path, params = {}) {
  const url = new URL(path, H_API_BASE);
  Object.entries(params).forEach(([k, v]) => {
    if (v !== undefined && v !== null && v !== "") url.searchParams.set(k, v);
  });

  const key = cacheKey(path, Object.fromEntries(url.searchParams));
  const now = Date.now();
  const hit = cache.get(key);
  if (hit && now - hit.t < TTL) return hit.data;

  const r = await fetch(url.toString(), {
    headers: {
      Accept: "application/json",
      ...(H_TOKEN ? { Authorization: `Bearer ${H_TOKEN}` } : {}),
    },
  });

  const data = await r.json().catch(() => ({}));
  if (!r.ok) {
    const err = { status: r.status, error: data?.error || "upstream_error", raw: data };
    throw err;
  }
  cache.set(key, { t: now, data });
  return data;
}

// --- Health ---
app.get("/health", (req, res) => res.json({ ok: true }));

// --- Catalog proxy: ดึงทุกหมวด/หรือกรองด้วย ?category= / ?name= ---
app.get("/api/hostinger/catalog", async (req, res) => {
  try {
    const { category, name } = req.query;
    const data = await callHostinger("/api/billing/v1/catalog", { category, name });
    // API บางที่ห่อใน { items: [...] } เลย normalize เป็น array กลับไป
    const items = Array.isArray(data) ? data : (Array.isArray(data?.items) ? data.items : data);
    res.json(items);
  } catch (e) {
    res.status(e.status || 500).json({ error: e.error || "proxy_error" });
  }
});

// --- Deeplink resolver: คืนลิงก์ซื้อของแต่ละแผน (ถ้ามีแม็ป), ไม่งั้น fallback = AF_BASE ---
let deeplinkMap = {};
try {
  deeplinkMap = JSON.parse(fs.readFileSync("./deeplinks.json", "utf-8"));
} catch (_) {
  deeplinkMap = {};
}

app.get("/api/hostinger/deeplink", (req, res) => {
  const { category, name, planId } = req.query;
  let url = AF_BASE;
  if (planId && deeplinkMap.byId?.[planId]) url = deeplinkMap.byId[planId];
  else if (name && deeplinkMap.byName?.[name]) url = deeplinkMap.byName[name];
  else if (category && deeplinkMap.byCategory?.[category]) url = deeplinkMap.byCategory[category];
  res.json({ url });
});

// --- 404 ---
app.use((req, res) => res.status(404).json({ error: "not_found" }));

// --- Start ---
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Hostinger AF proxy listening on :${port}`));
